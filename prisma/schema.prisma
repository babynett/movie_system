// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  username        String   @unique
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  age             Int
  preferredGenres String[] @default([])
  friends         String[] @default([]) @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  notes       Note[]
  comments    Comment[]
  messages    Message[]
  favorites   Favorite[]
  searches    Search[]
  interactions MovieInteraction[]

  @@map("users")
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  movieId   Int
  movieTitle String
  content   String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  movieId   Int
  movieTitle String
  content   String
  userId    String   @db.ObjectId
  username  String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  username  String
  isSystem  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Favorite {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  movieId     Int
  movieTitle  String
  posterPath  String?
  genres      String[] @default([])
  actors      String[] @default([])
  userId      String   @db.ObjectId
  addedAt     DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Search {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  query       String
  movieId     Int?
  userId      String   @db.ObjectId
  searchedAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("searches")
}

model MovieInteraction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  movieId     Int
  movieTitle  String
  userId      String   @db.ObjectId
  type        String   // "review", "chat_mention", "view"
  interactedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("movie_interactions")
}